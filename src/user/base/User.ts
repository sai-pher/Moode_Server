/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Condition } from "../../condition/base/Condition";
import { ValidateNested, IsOptional, IsDate, IsString } from "class-validator";
import { Type } from "class-transformer";
import { Doctor } from "../../doctor/base/Doctor";
import { EmotionalState } from "../../emotionalState/base/EmotionalState";
@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: () => [Condition],
  })
  @ValidateNested()
  @Type(() => Condition)
  @IsOptional()
  condition?: Array<Condition>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Doctor],
  })
  @ValidateNested()
  @Type(() => Doctor)
  @IsOptional()
  doctor?: Array<Doctor>;

  @ApiProperty({
    required: false,
    type: () => [Doctor],
  })
  @ValidateNested()
  @Type(() => Doctor)
  @IsOptional()
  doctor_Id?: Array<Doctor>;

  @ApiProperty({
    required: false,
    type: () => [EmotionalState],
  })
  @ValidateNested()
  @Type(() => EmotionalState)
  @IsOptional()
  emotionalState?: Array<EmotionalState>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: true,
    type: [String],
  })
  @IsString({
    each: true,
  })
  @Field(() => [String])
  roles!: Array<string>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;
}
export { User };
