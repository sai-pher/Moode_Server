/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEmotionalStateArgs } from "./CreateEmotionalStateArgs";
import { UpdateEmotionalStateArgs } from "./UpdateEmotionalStateArgs";
import { DeleteEmotionalStateArgs } from "./DeleteEmotionalStateArgs";
import { EmotionalStateFindManyArgs } from "./EmotionalStateFindManyArgs";
import { EmotionalStateFindUniqueArgs } from "./EmotionalStateFindUniqueArgs";
import { EmotionalState } from "./EmotionalState";
import { User } from "../../user/base/User";
import { EmotionalStateService } from "../emotionalState.service";

@graphql.Resolver(() => EmotionalState)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EmotionalStateResolverBase {
  constructor(
    protected readonly service: EmotionalStateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "read",
    possession: "any",
  })
  async _emotionalStatesMeta(
    @graphql.Args() args: EmotionalStateFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmotionalState])
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "read",
    possession: "any",
  })
  async emotionalStates(
    @graphql.Args() args: EmotionalStateFindManyArgs
  ): Promise<EmotionalState[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmotionalState, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "read",
    possession: "own",
  })
  async emotionalState(
    @graphql.Args() args: EmotionalStateFindUniqueArgs
  ): Promise<EmotionalState | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmotionalState)
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "create",
    possession: "any",
  })
  async createEmotionalState(
    @graphql.Args() args: CreateEmotionalStateArgs
  ): Promise<EmotionalState> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmotionalState)
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "update",
    possession: "any",
  })
  async updateEmotionalState(
    @graphql.Args() args: UpdateEmotionalStateArgs
  ): Promise<EmotionalState | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmotionalState)
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "delete",
    possession: "any",
  })
  async deleteEmotionalState(
    @graphql.Args() args: DeleteEmotionalStateArgs
  ): Promise<EmotionalState | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(@graphql.Parent() parent: EmotionalState): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
