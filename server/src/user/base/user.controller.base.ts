/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { ConditionFindManyArgs } from "../../condition/base/ConditionFindManyArgs";
import { Condition } from "../../condition/base/Condition";
import { ConditionWhereUniqueInput } from "../../condition/base/ConditionWhereUniqueInput";
import { DoctorFindManyArgs } from "../../doctor/base/DoctorFindManyArgs";
import { Doctor } from "../../doctor/base/Doctor";
import { DoctorWhereUniqueInput } from "../../doctor/base/DoctorWhereUniqueInput";
import { EmotionalStateFindManyArgs } from "../../emotionalState/base/EmotionalStateFindManyArgs";
import { EmotionalState } from "../../emotionalState/base/EmotionalState";
import { EmotionalStateWhereUniqueInput } from "../../emotionalState/base/EmotionalStateWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(UserFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Condition",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/condition")
  @ApiNestedQuery(ConditionFindManyArgs)
  async findManyCondition(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Condition[]> {
    const query = plainToClass(ConditionFindManyArgs, request.query);
    const results = await this.service.findCondition(params.id, {
      ...query,
      select: {
        conditionName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/condition")
  async connectCondition(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ConditionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      condition: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/condition")
  async updateCondition(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ConditionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      condition: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/condition")
  async disconnectCondition(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ConditionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      condition: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/doctor")
  @ApiNestedQuery(DoctorFindManyArgs)
  async findManyDoctor(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Doctor[]> {
    const query = plainToClass(DoctorFindManyArgs, request.query);
    const results = await this.service.findDoctor(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user_id: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/doctor")
  async connectDoctor(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctor: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/doctor")
  async updateDoctor(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctor: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/doctor")
  async disconnectDoctor(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctor: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/doctor_Id")
  @ApiNestedQuery(DoctorFindManyArgs)
  async findManyDoctorId(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Doctor[]> {
    const query = plainToClass(DoctorFindManyArgs, request.query);
    const results = await this.service.findDoctorId(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user_id: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/doctor_Id")
  async connectDoctorId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctor_Id: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/doctor_Id")
  async updateDoctorId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctor_Id: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/doctor_Id")
  async disconnectDoctorId(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctor_Id: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "EmotionalState",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/emotionalState")
  @ApiNestedQuery(EmotionalStateFindManyArgs)
  async findManyEmotionalState(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EmotionalState[]> {
    const query = plainToClass(EmotionalStateFindManyArgs, request.query);
    const results = await this.service.findEmotionalState(params.id, {
      ...query,
      select: {
        anxiety: true,
        coping: true,
        createdAt: true,
        feeling: true,
        harm: true,
        id: true,
        medication: true,
        productivity: true,
        sleep: true,
        stress: true,
        suicide: true,
        updatedAt: true,
        upTo: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/emotionalState")
  async connectEmotionalState(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmotionalStateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emotionalState: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/emotionalState")
  async updateEmotionalState(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmotionalStateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emotionalState: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/emotionalState")
  async disconnectEmotionalState(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmotionalStateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emotionalState: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
